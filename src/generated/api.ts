/* tslint:disable */
/* eslint-disable */
/**
 * DOCUMENTATION
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact-email@something.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

//@ts-nocheck
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 *
 * @export
 * @interface AuthChangePasswordPostRequest
 */
export interface AuthChangePasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  password: string;
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  currentPassword: string;
  /**
   *
   * @type {string}
   * @memberof AuthChangePasswordPostRequest
   */
  passwordConfirmation: string;
}
/**
 *
 * @export
 * @interface AuthForgotPasswordPost200Response
 */
export interface AuthForgotPasswordPost200Response {
  /**
   *
   * @type {string}
   * @memberof AuthForgotPasswordPost200Response
   */
  ok?: AuthForgotPasswordPost200ResponseOkEnum;
}

export const AuthForgotPasswordPost200ResponseOkEnum = {
  True: 'true',
} as const;

export type AuthForgotPasswordPost200ResponseOkEnum =
  (typeof AuthForgotPasswordPost200ResponseOkEnum)[keyof typeof AuthForgotPasswordPost200ResponseOkEnum];

/**
 *
 * @export
 * @interface AuthForgotPasswordPostRequest
 */
export interface AuthForgotPasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthForgotPasswordPostRequest
   */
  email?: string;
}
/**
 *
 * @export
 * @interface AuthLocalPostRequest
 */
export interface AuthLocalPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthLocalPostRequest
   */
  identifier?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalPostRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface AuthLocalRegisterPostRequest
 */
export interface AuthLocalRegisterPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthLocalRegisterPostRequest
   */
  password?: string;
}
/**
 *
 * @export
 * @interface AuthResetPasswordPostRequest
 */
export interface AuthResetPasswordPostRequest {
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  password?: string;
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  passwordConfirmation?: string;
  /**
   *
   * @type {string}
   * @memberof AuthResetPasswordPostRequest
   */
  code?: string;
}
/**
 *
 * @export
 * @interface AuthSendEmailConfirmationPost200Response
 */
export interface AuthSendEmailConfirmationPost200Response {
  /**
   *
   * @type {string}
   * @memberof AuthSendEmailConfirmationPost200Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof AuthSendEmailConfirmationPost200Response
   */
  sent?: AuthSendEmailConfirmationPost200ResponseSentEnum;
}

export const AuthSendEmailConfirmationPost200ResponseSentEnum = {
  True: 'true',
} as const;

export type AuthSendEmailConfirmationPost200ResponseSentEnum =
  (typeof AuthSendEmailConfirmationPost200ResponseSentEnum)[keyof typeof AuthSendEmailConfirmationPost200ResponseSentEnum];

/**
 *
 * @export
 * @interface Donation
 */
export interface Donation {
  /**
   *
   * @type {number}
   * @memberof Donation
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof Donation
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof Donation
   */
  note?: string;
  /**
   *
   * @type {DonationDonor}
   * @memberof Donation
   */
  donor?: DonationDonor;
  /**
   *
   * @type {string}
   * @memberof Donation
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Donation
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Donation
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Donation
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Donation
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonor
 */
export interface DonationDonor {
  /**
   *
   * @type {DonationDonorData}
   * @memberof DonationDonor
   */
  data?: DonationDonorData;
}
/**
 *
 * @export
 * @interface DonationDonorData
 */
export interface DonationDonorData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributes}
   * @memberof DonationDonorData
   */
  attributes?: DonationDonorDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributes
 */
export interface DonationDonorDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  title?: DonationDonorDataAttributesTitleEnum;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  street?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  plz?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  country?: string;
  /**
   *
   * @type {boolean}
   * @memberof DonationDonorDataAttributes
   */
  wantReceipt?: boolean;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributes
   */
  ibans?: any;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  mandateNumber?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  note?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  email?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisation}
   * @memberof DonationDonorDataAttributes
   */
  organisation?: DonationDonorDataAttributesOrganisation;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}

export const DonationDonorDataAttributesTitleEnum = {
  Mr: 'mr',
  Mrs: 'mrs',
  MrAndMrs: 'mrAndMrs',
  None: 'none',
} as const;

export type DonationDonorDataAttributesTitleEnum =
  (typeof DonationDonorDataAttributesTitleEnum)[keyof typeof DonationDonorDataAttributesTitleEnum];

/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisation
 */
export interface DonationDonorDataAttributesOrganisation {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationData}
   * @memberof DonationDonorDataAttributesOrganisation
   */
  data?: DonationDonorDataAttributesOrganisationData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationData
 */
export interface DonationDonorDataAttributesOrganisationData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributes}
   * @memberof DonationDonorDataAttributesOrganisationData
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  name?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  users?: DonationDonorDataAttributesOrganisationDataAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  donors?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  receiptTemplate?: DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogo}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  logo?: DonationDonorDataAttributesOrganisationDataAttributesLogo;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogo
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogo {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoData}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogo
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesLogoData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoData
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoData
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  related?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolder}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  folder?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolder;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolder
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolder {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderData}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolder
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderData
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderData
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  name?: string;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  pathId?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  parent?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  children?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFiles}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  files?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFiles;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  path?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFiles
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFiles {
  /**
   *
   * @type {Array<DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner>}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFiles
   */
  data?: Array<DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner>;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  height?: number;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  formats?: any;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  provider_metadata?: any;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  related?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  folder?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  folderPath?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateData}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateData
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateData
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes {
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  templateStructure?: any;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  organisation?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplateDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsers
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsers {
  /**
   *
   * @type {Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInner>}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsers
   */
  data?: Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInner>;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInner
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInner {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInner
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInner
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  confirmationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  role?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  organisation?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  firstname?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  lastname?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleData}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleData
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleData
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  type?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissions}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  permissions?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissions;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  users?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissions
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissions {
  /**
   *
   * @type {Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInner>}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissions
   */
  data?: Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInner>;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInner
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInner {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInner
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInner
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  action?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  role?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedBy}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedBy;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedBy
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedBy {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByData}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedBy
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByData
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByData
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByData
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  firstname?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  lastname?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  registrationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  isActive?: boolean;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRoles}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  roles?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRoles;
  /**
   *
   * @type {boolean}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  preferedLanguage?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRoles
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRoles {
  /**
   *
   * @type {Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInner>}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRoles
   */
  data?: Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInner>;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInner
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInner {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInner
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInner
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  code?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  description?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  users?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  permissions?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions {
  /**
   *
   * @type {Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissions
   */
  data?: Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner>;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
   */
  id?: number;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInner
   */
  attributes?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  action?: string;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  actionParameters?: any;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  subject?: string;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  properties?: any;
  /**
   *
   * @type {any}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  conditions?: any;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  role?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesPermissionsDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers {
  /**
   *
   * @type {Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData>}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers
   */
  data?: Array<DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData>;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData;
}
/**
 *
 * @export
 * @interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData
 */
export interface DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData {
  /**
   *
   * @type {number}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData
   */
  id?: number;
  /**
   *
   * @type {object}
   * @memberof DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRoleData
   */
  attributes?: object;
}
/**
 *
 * @export
 * @interface DonationListResponse
 */
export interface DonationListResponse {
  /**
   *
   * @type {Array<DonationListResponseDataItem>}
   * @memberof DonationListResponse
   */
  data?: Array<DonationListResponseDataItem>;
  /**
   *
   * @type {DonationListResponseMeta}
   * @memberof DonationListResponse
   */
  meta?: DonationListResponseMeta;
}
/**
 *
 * @export
 * @interface DonationListResponseDataItem
 */
export interface DonationListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof DonationListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {Donation}
   * @memberof DonationListResponseDataItem
   */
  attributes?: Donation;
}
/**
 *
 * @export
 * @interface DonationListResponseMeta
 */
export interface DonationListResponseMeta {
  /**
   *
   * @type {DonationListResponseMetaPagination}
   * @memberof DonationListResponseMeta
   */
  pagination?: DonationListResponseMetaPagination;
}
/**
 *
 * @export
 * @interface DonationListResponseMetaPagination
 */
export interface DonationListResponseMetaPagination {
  /**
   *
   * @type {number}
   * @memberof DonationListResponseMetaPagination
   */
  page?: number;
  /**
   *
   * @type {number}
   * @memberof DonationListResponseMetaPagination
   */
  pageSize?: number;
  /**
   *
   * @type {number}
   * @memberof DonationListResponseMetaPagination
   */
  pageCount?: number;
  /**
   *
   * @type {number}
   * @memberof DonationListResponseMetaPagination
   */
  total?: number;
}
/**
 *
 * @export
 * @interface DonationRequest
 */
export interface DonationRequest {
  /**
   *
   * @type {DonationRequestData}
   * @memberof DonationRequest
   */
  data: DonationRequestData;
}
/**
 *
 * @export
 * @interface DonationRequestData
 */
export interface DonationRequestData {
  /**
   *
   * @type {number}
   * @memberof DonationRequestData
   */
  amount?: number;
  /**
   *
   * @type {string}
   * @memberof DonationRequestData
   */
  date?: string;
  /**
   *
   * @type {string}
   * @memberof DonationRequestData
   */
  note?: string;
  /**
   *
   * @type {DonationRequestDataDonor}
   * @memberof DonationRequestData
   */
  donor?: DonationRequestDataDonor;
}
/**
 * @type DonationRequestDataDonor
 * @export
 */
export type DonationRequestDataDonor = number | string;

/**
 *
 * @export
 * @interface DonationResponse
 */
export interface DonationResponse {
  /**
   *
   * @type {DonationResponseDataObject}
   * @memberof DonationResponse
   */
  data?: DonationResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof DonationResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface DonationResponseDataObject
 */
export interface DonationResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof DonationResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {Donation}
   * @memberof DonationResponseDataObject
   */
  attributes?: Donation;
}
/**
 *
 * @export
 * @interface Donor
 */
export interface Donor {
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  title?: DonorTitleEnum;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  street?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  plz?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  country?: string;
  /**
   *
   * @type {boolean}
   * @memberof Donor
   */
  wantReceipt?: boolean;
  /**
   *
   * @type {any}
   * @memberof Donor
   */
  ibans?: any;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  mandateNumber?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  note?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  email?: string;
  /**
   *
   * @type {DonorOrganisation}
   * @memberof Donor
   */
  organisation?: DonorOrganisation;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Donor
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Donor
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Donor
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}

export const DonorTitleEnum = {
  Mr: 'mr',
  Mrs: 'mrs',
  MrAndMrs: 'mrAndMrs',
  None: 'none',
} as const;

export type DonorTitleEnum = (typeof DonorTitleEnum)[keyof typeof DonorTitleEnum];

/**
 *
 * @export
 * @interface DonorListResponse
 */
export interface DonorListResponse {
  /**
   *
   * @type {Array<DonorListResponseDataItem>}
   * @memberof DonorListResponse
   */
  data?: Array<DonorListResponseDataItem>;
  /**
   *
   * @type {DonationListResponseMeta}
   * @memberof DonorListResponse
   */
  meta?: DonationListResponseMeta;
}
/**
 *
 * @export
 * @interface DonorListResponseDataItem
 */
export interface DonorListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof DonorListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {Donor}
   * @memberof DonorListResponseDataItem
   */
  attributes?: Donor;
}
/**
 *
 * @export
 * @interface DonorOrganisation
 */
export interface DonorOrganisation {
  /**
   *
   * @type {DonorOrganisationData}
   * @memberof DonorOrganisation
   */
  data?: DonorOrganisationData;
}
/**
 *
 * @export
 * @interface DonorOrganisationData
 */
export interface DonorOrganisationData {
  /**
   *
   * @type {number}
   * @memberof DonorOrganisationData
   */
  id?: number;
  /**
   *
   * @type {DonorOrganisationDataAttributes}
   * @memberof DonorOrganisationData
   */
  attributes?: DonorOrganisationDataAttributes;
}
/**
 *
 * @export
 * @interface DonorOrganisationDataAttributes
 */
export interface DonorOrganisationDataAttributes {
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributes
   */
  name?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsers}
   * @memberof DonorOrganisationDataAttributes
   */
  users?: DonationDonorDataAttributesOrganisationDataAttributesUsers;
  /**
   *
   * @type {DonorOrganisationDataAttributesDonors}
   * @memberof DonorOrganisationDataAttributes
   */
  donors?: DonorOrganisationDataAttributesDonors;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate}
   * @memberof DonorOrganisationDataAttributes
   */
  receiptTemplate?: DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogo}
   * @memberof DonorOrganisationDataAttributes
   */
  logo?: DonationDonorDataAttributesOrganisationDataAttributesLogo;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonorOrganisationDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonorOrganisationDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface DonorOrganisationDataAttributesDonors
 */
export interface DonorOrganisationDataAttributesDonors {
  /**
   *
   * @type {Array<DonorOrganisationDataAttributesDonorsDataInner>}
   * @memberof DonorOrganisationDataAttributesDonors
   */
  data?: Array<DonorOrganisationDataAttributesDonorsDataInner>;
}
/**
 *
 * @export
 * @interface DonorOrganisationDataAttributesDonorsDataInner
 */
export interface DonorOrganisationDataAttributesDonorsDataInner {
  /**
   *
   * @type {number}
   * @memberof DonorOrganisationDataAttributesDonorsDataInner
   */
  id?: number;
  /**
   *
   * @type {DonorOrganisationDataAttributesDonorsDataInnerAttributes}
   * @memberof DonorOrganisationDataAttributesDonorsDataInner
   */
  attributes?: DonorOrganisationDataAttributesDonorsDataInnerAttributes;
}
/**
 *
 * @export
 * @interface DonorOrganisationDataAttributesDonorsDataInnerAttributes
 */
export interface DonorOrganisationDataAttributesDonorsDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  title?: DonorOrganisationDataAttributesDonorsDataInnerAttributesTitleEnum;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  street?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  plz?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  country?: string;
  /**
   *
   * @type {boolean}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  wantReceipt?: boolean;
  /**
   *
   * @type {any}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  ibans?: any;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  mandateNumber?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  note?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  email?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  organisation?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof DonorOrganisationDataAttributesDonorsDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}

export const DonorOrganisationDataAttributesDonorsDataInnerAttributesTitleEnum = {
  Mr: 'mr',
  Mrs: 'mrs',
  MrAndMrs: 'mrAndMrs',
  None: 'none',
} as const;

export type DonorOrganisationDataAttributesDonorsDataInnerAttributesTitleEnum =
  (typeof DonorOrganisationDataAttributesDonorsDataInnerAttributesTitleEnum)[keyof typeof DonorOrganisationDataAttributesDonorsDataInnerAttributesTitleEnum];

/**
 *
 * @export
 * @interface DonorRequest
 */
export interface DonorRequest {
  /**
   *
   * @type {DonorRequestData}
   * @memberof DonorRequest
   */
  data: DonorRequestData;
}
/**
 *
 * @export
 * @interface DonorRequestData
 */
export interface DonorRequestData {
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  surname?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  title?: DonorRequestDataTitleEnum;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  street?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  plz?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  city?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  country?: string;
  /**
   *
   * @type {boolean}
   * @memberof DonorRequestData
   */
  wantReceipt?: boolean;
  /**
   *
   * @type {any}
   * @memberof DonorRequestData
   */
  ibans?: any;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  mandateNumber?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  note?: string;
  /**
   *
   * @type {string}
   * @memberof DonorRequestData
   */
  email?: string;
  /**
   *
   * @type {DonationRequestDataDonor}
   * @memberof DonorRequestData
   */
  organisation?: DonationRequestDataDonor;
}

export const DonorRequestDataTitleEnum = {
  Mr: 'mr',
  Mrs: 'mrs',
  MrAndMrs: 'mrAndMrs',
  None: 'none',
} as const;

export type DonorRequestDataTitleEnum =
  (typeof DonorRequestDataTitleEnum)[keyof typeof DonorRequestDataTitleEnum];

/**
 *
 * @export
 * @interface DonorResponse
 */
export interface DonorResponse {
  /**
   *
   * @type {DonorResponseDataObject}
   * @memberof DonorResponse
   */
  data?: DonorResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof DonorResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface DonorResponseDataObject
 */
export interface DonorResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof DonorResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {Donor}
   * @memberof DonorResponseDataObject
   */
  attributes?: Donor;
}
/**
 * @type ErrorData
 * @export
 */
export type ErrorData = Array<object> | object;

/**
 *
 * @export
 * @interface ErrorError
 */
export interface ErrorError {
  /**
   *
   * @type {number}
   * @memberof ErrorError
   */
  status?: number;
  /**
   *
   * @type {string}
   * @memberof ErrorError
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ErrorError
   */
  message?: string;
  /**
   *
   * @type {object}
   * @memberof ErrorError
   */
  details?: object;
}
/**
 *
 * @export
 * @interface ModelError
 */
export interface ModelError {
  /**
   *
   * @type {ErrorData}
   * @memberof ModelError
   */
  data?: ErrorData | null;
  /**
   *
   * @type {ErrorError}
   * @memberof ModelError
   */
  error: ErrorError;
}
/**
 *
 * @export
 * @interface Organisation
 */
export interface Organisation {
  /**
   *
   * @type {string}
   * @memberof Organisation
   */
  name?: string;
  /**
   *
   * @type {OrganisationUsers}
   * @memberof Organisation
   */
  users?: OrganisationUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof Organisation
   */
  donors?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Organisation
   */
  receiptTemplate?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {OrganisationLogo}
   * @memberof Organisation
   */
  logo?: OrganisationLogo;
  /**
   *
   * @type {string}
   * @memberof Organisation
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof Organisation
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof Organisation
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Organisation
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof Organisation
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface OrganisationListResponse
 */
export interface OrganisationListResponse {
  /**
   *
   * @type {Array<OrganisationListResponseDataItem>}
   * @memberof OrganisationListResponse
   */
  data?: Array<OrganisationListResponseDataItem>;
  /**
   *
   * @type {DonationListResponseMeta}
   * @memberof OrganisationListResponse
   */
  meta?: DonationListResponseMeta;
}
/**
 *
 * @export
 * @interface OrganisationListResponseDataItem
 */
export interface OrganisationListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof OrganisationListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {Organisation}
   * @memberof OrganisationListResponseDataItem
   */
  attributes?: Organisation;
}
/**
 *
 * @export
 * @interface OrganisationLogo
 */
export interface OrganisationLogo {
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner}
   * @memberof OrganisationLogo
   */
  data?: DonationDonorDataAttributesOrganisationDataAttributesLogoDataAttributesFolderDataAttributesFilesDataInner;
}
/**
 *
 * @export
 * @interface OrganisationRequest
 */
export interface OrganisationRequest {
  /**
   *
   * @type {OrganisationRequestData}
   * @memberof OrganisationRequest
   */
  data: OrganisationRequestData;
}
/**
 *
 * @export
 * @interface OrganisationRequestData
 */
export interface OrganisationRequestData {
  /**
   *
   * @type {string}
   * @memberof OrganisationRequestData
   */
  name?: string;
  /**
   *
   * @type {Array<DonationRequestDataDonor>}
   * @memberof OrganisationRequestData
   */
  users?: Array<DonationRequestDataDonor>;
  /**
   *
   * @type {Array<DonationRequestDataDonor>}
   * @memberof OrganisationRequestData
   */
  donors?: Array<DonationRequestDataDonor>;
  /**
   *
   * @type {DonationRequestDataDonor}
   * @memberof OrganisationRequestData
   */
  receiptTemplate?: DonationRequestDataDonor;
  /**
   *
   * @type {DonationRequestDataDonor}
   * @memberof OrganisationRequestData
   */
  logo?: DonationRequestDataDonor;
}
/**
 *
 * @export
 * @interface OrganisationResponse
 */
export interface OrganisationResponse {
  /**
   *
   * @type {OrganisationResponseDataObject}
   * @memberof OrganisationResponse
   */
  data?: OrganisationResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof OrganisationResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface OrganisationResponseDataObject
 */
export interface OrganisationResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof OrganisationResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {Organisation}
   * @memberof OrganisationResponseDataObject
   */
  attributes?: Organisation;
}
/**
 *
 * @export
 * @interface OrganisationUsers
 */
export interface OrganisationUsers {
  /**
   *
   * @type {Array<OrganisationUsersDataInner>}
   * @memberof OrganisationUsers
   */
  data?: Array<OrganisationUsersDataInner>;
}
/**
 *
 * @export
 * @interface OrganisationUsersDataInner
 */
export interface OrganisationUsersDataInner {
  /**
   *
   * @type {number}
   * @memberof OrganisationUsersDataInner
   */
  id?: number;
  /**
   *
   * @type {OrganisationUsersDataInnerAttributes}
   * @memberof OrganisationUsersDataInner
   */
  attributes?: OrganisationUsersDataInnerAttributes;
}
/**
 *
 * @export
 * @interface OrganisationUsersDataInnerAttributes
 */
export interface OrganisationUsersDataInnerAttributes {
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  provider?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  resetPasswordToken?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  confirmationToken?: string;
  /**
   *
   * @type {boolean}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  blocked?: boolean;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  role?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRole;
  /**
   *
   * @type {OrganisationUsersDataInnerAttributesOrganisation}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  organisation?: OrganisationUsersDataInnerAttributesOrganisation;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  firstname?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  lastname?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof OrganisationUsersDataInnerAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface OrganisationUsersDataInnerAttributesOrganisation
 */
export interface OrganisationUsersDataInnerAttributesOrganisation {
  /**
   *
   * @type {OrganisationUsersDataInnerAttributesOrganisationData}
   * @memberof OrganisationUsersDataInnerAttributesOrganisation
   */
  data?: OrganisationUsersDataInnerAttributesOrganisationData;
}
/**
 *
 * @export
 * @interface OrganisationUsersDataInnerAttributesOrganisationData
 */
export interface OrganisationUsersDataInnerAttributesOrganisationData {
  /**
   *
   * @type {number}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationData
   */
  id?: number;
  /**
   *
   * @type {OrganisationUsersDataInnerAttributesOrganisationDataAttributes}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationData
   */
  attributes?: OrganisationUsersDataInnerAttributesOrganisationDataAttributes;
}
/**
 *
 * @export
 * @interface OrganisationUsersDataInnerAttributesOrganisationDataAttributes
 */
export interface OrganisationUsersDataInnerAttributesOrganisationDataAttributes {
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  name?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  users?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesCreatedByDataAttributesRolesDataInnerAttributesUsers;
  /**
   *
   * @type {DonorOrganisationDataAttributesDonors}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  donors?: DonorOrganisationDataAttributesDonors;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  receiptTemplate?: DonationDonorDataAttributesOrganisationDataAttributesReceiptTemplate;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesLogo}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  logo?: DonationDonorDataAttributesOrganisationDataAttributesLogo;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof OrganisationUsersDataInnerAttributesOrganisationDataAttributes
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface ReceiptTemplate
 */
export interface ReceiptTemplate {
  /**
   *
   * @type {any}
   * @memberof ReceiptTemplate
   */
  templateStructure?: any;
  /**
   *
   * @type {DonorOrganisation}
   * @memberof ReceiptTemplate
   */
  organisation?: DonorOrganisation;
  /**
   *
   * @type {string}
   * @memberof ReceiptTemplate
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof ReceiptTemplate
   */
  updatedAt?: string;
  /**
   *
   * @type {string}
   * @memberof ReceiptTemplate
   */
  publishedAt?: string;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof ReceiptTemplate
   */
  createdBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
  /**
   *
   * @type {DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole}
   * @memberof ReceiptTemplate
   */
  updatedBy?: DonationDonorDataAttributesOrganisationDataAttributesUsersDataInnerAttributesRoleDataAttributesPermissionsDataInnerAttributesRole;
}
/**
 *
 * @export
 * @interface ReceiptTemplateListResponse
 */
export interface ReceiptTemplateListResponse {
  /**
   *
   * @type {Array<ReceiptTemplateListResponseDataItem>}
   * @memberof ReceiptTemplateListResponse
   */
  data?: Array<ReceiptTemplateListResponseDataItem>;
  /**
   *
   * @type {DonationListResponseMeta}
   * @memberof ReceiptTemplateListResponse
   */
  meta?: DonationListResponseMeta;
}
/**
 *
 * @export
 * @interface ReceiptTemplateListResponseDataItem
 */
export interface ReceiptTemplateListResponseDataItem {
  /**
   *
   * @type {number}
   * @memberof ReceiptTemplateListResponseDataItem
   */
  id?: number;
  /**
   *
   * @type {ReceiptTemplate}
   * @memberof ReceiptTemplateListResponseDataItem
   */
  attributes?: ReceiptTemplate;
}
/**
 *
 * @export
 * @interface ReceiptTemplateRequest
 */
export interface ReceiptTemplateRequest {
  /**
   *
   * @type {ReceiptTemplateRequestData}
   * @memberof ReceiptTemplateRequest
   */
  data: ReceiptTemplateRequestData;
}
/**
 *
 * @export
 * @interface ReceiptTemplateRequestData
 */
export interface ReceiptTemplateRequestData {
  /**
   *
   * @type {any}
   * @memberof ReceiptTemplateRequestData
   */
  templateStructure?: any;
  /**
   *
   * @type {DonationRequestDataDonor}
   * @memberof ReceiptTemplateRequestData
   */
  organisation?: DonationRequestDataDonor;
}
/**
 *
 * @export
 * @interface ReceiptTemplateResponse
 */
export interface ReceiptTemplateResponse {
  /**
   *
   * @type {ReceiptTemplateResponseDataObject}
   * @memberof ReceiptTemplateResponse
   */
  data?: ReceiptTemplateResponseDataObject;
  /**
   *
   * @type {object}
   * @memberof ReceiptTemplateResponse
   */
  meta?: object;
}
/**
 *
 * @export
 * @interface ReceiptTemplateResponseDataObject
 */
export interface ReceiptTemplateResponseDataObject {
  /**
   *
   * @type {number}
   * @memberof ReceiptTemplateResponseDataObject
   */
  id?: number;
  /**
   *
   * @type {ReceiptTemplate}
   * @memberof ReceiptTemplateResponseDataObject
   */
  attributes?: ReceiptTemplate;
}
/**
 *
 * @export
 * @interface UploadFile
 */
export interface UploadFile {
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  caption?: string;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  width?: number;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  height?: number;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  formats?: number;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  hash?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  ext?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  mime?: string;
  /**
   *
   * @type {number}
   * @memberof UploadFile
   */
  size?: number;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  url?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  previewUrl?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  provider?: string;
  /**
   *
   * @type {object}
   * @memberof UploadFile
   */
  provider_metadata?: object;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UploadFile
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UploadIdIdPostRequestFileInfo
 */
export interface UploadIdIdPostRequestFileInfo {
  /**
   *
   * @type {string}
   * @memberof UploadIdIdPostRequestFileInfo
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UploadIdIdPostRequestFileInfo
   */
  alternativeText?: string;
  /**
   *
   * @type {string}
   * @memberof UploadIdIdPostRequestFileInfo
   */
  caption?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsPermissionsGet200Response
 */
export interface UsersPermissionsPermissionsGet200Response {
  /**
   *
   * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
   * @memberof UsersPermissionsPermissionsGet200Response
   */
  permissions?: { [key: string]: UsersPermissionsPermissionsTreeValue };
}
/**
 * every api
 * @export
 * @interface UsersPermissionsPermissionsTreeValue
 */
export interface UsersPermissionsPermissionsTreeValue {
  /**
   * every controller of the api
   * @type {{ [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue; }; }}
   * @memberof UsersPermissionsPermissionsTreeValue
   */
  controllers?: {
    [key: string]: { [key: string]: UsersPermissionsPermissionsTreeValueControllersValueValue };
  };
}
/**
 * every action of every controller
 * @export
 * @interface UsersPermissionsPermissionsTreeValueControllersValueValue
 */
export interface UsersPermissionsPermissionsTreeValueControllersValueValue {
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
   */
  enabled?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsPermissionsTreeValueControllersValueValue
   */
  policy?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsRole
 */
export interface UsersPermissionsRole {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRole
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRole
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200Response
 */
export interface UsersPermissionsRolesGet200Response {
  /**
   *
   * @type {Array<UsersPermissionsRolesGet200ResponseRolesInner>}
   * @memberof UsersPermissionsRolesGet200Response
   */
  roles?: Array<UsersPermissionsRolesGet200ResponseRolesInner>;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesGet200ResponseRolesInner
 */
export interface UsersPermissionsRolesGet200ResponseRolesInner {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  type?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  updatedAt?: string;
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsRolesGet200ResponseRolesInner
   */
  nb_users?: number;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesIdGet200Response
 */
export interface UsersPermissionsRolesIdGet200Response {
  /**
   *
   * @type {UsersPermissionsRole}
   * @memberof UsersPermissionsRolesIdGet200Response
   */
  role?: UsersPermissionsRole;
}
/**
 *
 * @export
 * @interface UsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsRolesPostRequest {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  description?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsRolesPostRequest
   */
  type?: string;
  /**
   *
   * @type {{ [key: string]: UsersPermissionsPermissionsTreeValue; }}
   * @memberof UsersPermissionsRolesPostRequest
   */
  permissions?: { [key: string]: UsersPermissionsPermissionsTreeValue };
}
/**
 *
 * @export
 * @interface UsersPermissionsUser
 */
export interface UsersPermissionsUser {
  /**
   *
   * @type {number}
   * @memberof UsersPermissionsUser
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUser
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPermissionsUser
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUser
   */
  updatedAt?: string;
}
/**
 *
 * @export
 * @interface UsersPermissionsUserRegistration
 */
export interface UsersPermissionsUserRegistration {
  /**
   *
   * @type {string}
   * @memberof UsersPermissionsUserRegistration
   */
  jwt?: string;
  /**
   *
   * @type {UsersPermissionsUser}
   * @memberof UsersPermissionsUserRegistration
   */
  user?: UsersPermissionsUser;
}
/**
 *
 * @export
 * @interface UsersPost201Response
 */
export interface UsersPost201Response {
  /**
   *
   * @type {number}
   * @memberof UsersPost201Response
   */
  id?: number;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  username?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  provider?: string;
  /**
   *
   * @type {boolean}
   * @memberof UsersPost201Response
   */
  confirmed?: boolean;
  /**
   *
   * @type {boolean}
   * @memberof UsersPost201Response
   */
  blocked?: boolean;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  createdAt?: string;
  /**
   *
   * @type {string}
   * @memberof UsersPost201Response
   */
  updatedAt?: string;
  /**
   *
   * @type {UsersPermissionsRole}
   * @memberof UsersPost201Response
   */
  role?: UsersPermissionsRole;
}
/**
 *
 * @export
 * @interface UsersPostRequest
 */
export interface UsersPostRequest {
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  email: string;
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  username: string;
  /**
   *
   * @type {string}
   * @memberof UsersPostRequest
   */
  password: string;
}

/**
 * DonationApi - axios parameter creator
 * @export
 */
export const DonationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDonationsId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteDonationsId', 'id', id);
      const localVarPath = `/donations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonations: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/donations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter['pagination[page]'] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter['pagination[start]'] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter['pagination[limit]'] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter['populate'] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter['filters'] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter['locale'] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonationsId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getDonationsId', 'id', id);
      const localVarPath = `/donations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {DonationRequest} donationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDonations: async (
      donationRequest: DonationRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'donationRequest' is not null or undefined
      assertParamExists('postDonations', 'donationRequest', donationRequest);
      const localVarPath = `/donations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        donationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {DonationRequest} donationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDonationsId: async (
      id: number,
      donationRequest: DonationRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putDonationsId', 'id', id);
      // verify required parameter 'donationRequest' is not null or undefined
      assertParamExists('putDonationsId', 'donationRequest', donationRequest);
      const localVarPath = `/donations/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        donationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DonationApi - functional programming interface
 * @export
 */
export const DonationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DonationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDonationsId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDonationsId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonationApi.deleteDonationsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDonations(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDonations(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonationApi.getDonations']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDonationsId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDonationsId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonationApi.getDonationsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {DonationRequest} donationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDonations(
      donationRequest: DonationRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postDonations(
        donationRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonationApi.postDonations']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {DonationRequest} donationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putDonationsId(
      id: number,
      donationRequest: DonationRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonationResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putDonationsId(
        id,
        donationRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonationApi.putDonationsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * DonationApi - factory interface
 * @export
 */
export const DonationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DonationApiFp(configuration);
  return {
    /**
     *
     * @param {DonationApiDeleteDonationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDonationsId(
      requestParameters: DonationApiDeleteDonationsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<number> {
      return localVarFp
        .deleteDonationsId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonationApiGetDonationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonations(
      requestParameters: DonationApiGetDonationsRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonationListResponse> {
      return localVarFp
        .getDonations(
          requestParameters.sort,
          requestParameters.paginationWithCount,
          requestParameters.paginationPage,
          requestParameters.paginationPageSize,
          requestParameters.paginationStart,
          requestParameters.paginationLimit,
          requestParameters.fields,
          requestParameters.populate,
          requestParameters.filters,
          requestParameters.locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonationApiGetDonationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonationsId(
      requestParameters: DonationApiGetDonationsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonationResponse> {
      return localVarFp
        .getDonationsId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonationApiPostDonationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDonations(
      requestParameters: DonationApiPostDonationsRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonationResponse> {
      return localVarFp
        .postDonations(requestParameters.donationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonationApiPutDonationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDonationsId(
      requestParameters: DonationApiPutDonationsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonationResponse> {
      return localVarFp
        .putDonationsId(requestParameters.id, requestParameters.donationRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DonationApi - interface
 * @export
 * @interface DonationApi
 */
export interface DonationApiInterface {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApiInterface
   */
  deleteDonationsId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<number>;

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApiInterface
   */
  getDonations(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DonationListResponse>;

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApiInterface
   */
  getDonationsId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DonationResponse>;

  /**
   *
   * @param {DonationRequest} donationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApiInterface
   */
  postDonations(
    donationRequest: DonationRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DonationResponse>;

  /**
   *
   * @param {number} id
   * @param {DonationRequest} donationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApiInterface
   */
  putDonationsId(
    id: number,
    donationRequest: DonationRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DonationResponse>;
}

/**
 * Request parameters for deleteDonationsId operation in DonationApi.
 * @export
 * @interface DonationApiDeleteDonationsIdRequest
 */
export interface DonationApiDeleteDonationsIdRequest {
  /**
   *
   * @type {number}
   * @memberof DonationApiDeleteDonationsId
   */
  readonly id: number;
}

/**
 * Request parameters for getDonations operation in DonationApi.
 * @export
 * @interface DonationApiGetDonationsRequest
 */
export interface DonationApiGetDonationsRequest {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   * @type {string}
   * @memberof DonationApiGetDonations
   */
  readonly sort?: string;

  /**
   * Return page/pageSize (default: true)
   * @type {boolean}
   * @memberof DonationApiGetDonations
   */
  readonly paginationWithCount?: boolean;

  /**
   * Page number (default: 0)
   * @type {number}
   * @memberof DonationApiGetDonations
   */
  readonly paginationPage?: number;

  /**
   * Page size (default: 25)
   * @type {number}
   * @memberof DonationApiGetDonations
   */
  readonly paginationPageSize?: number;

  /**
   * Offset value (default: 0)
   * @type {number}
   * @memberof DonationApiGetDonations
   */
  readonly paginationStart?: number;

  /**
   * Number of entities to return (default: 25)
   * @type {number}
   * @memberof DonationApiGetDonations
   */
  readonly paginationLimit?: number;

  /**
   * Fields to return (ex: title,author)
   * @type {string}
   * @memberof DonationApiGetDonations
   */
  readonly fields?: string;

  /**
   * Relations to return
   * @type {string}
   * @memberof DonationApiGetDonations
   */
  readonly populate?: string;

  /**
   * Filters to apply
   * @type {object}
   * @memberof DonationApiGetDonations
   */
  readonly filters?: object;

  /**
   * Locale to apply
   * @type {string}
   * @memberof DonationApiGetDonations
   */
  readonly locale?: string;
}

/**
 * Request parameters for getDonationsId operation in DonationApi.
 * @export
 * @interface DonationApiGetDonationsIdRequest
 */
export interface DonationApiGetDonationsIdRequest {
  /**
   *
   * @type {number}
   * @memberof DonationApiGetDonationsId
   */
  readonly id: number;
}

/**
 * Request parameters for postDonations operation in DonationApi.
 * @export
 * @interface DonationApiPostDonationsRequest
 */
export interface DonationApiPostDonationsRequest {
  /**
   *
   * @type {DonationRequest}
   * @memberof DonationApiPostDonations
   */
  readonly donationRequest: DonationRequest;
}

/**
 * Request parameters for putDonationsId operation in DonationApi.
 * @export
 * @interface DonationApiPutDonationsIdRequest
 */
export interface DonationApiPutDonationsIdRequest {
  /**
   *
   * @type {number}
   * @memberof DonationApiPutDonationsId
   */
  readonly id: number;

  /**
   *
   * @type {DonationRequest}
   * @memberof DonationApiPutDonationsId
   */
  readonly donationRequest: DonationRequest;
}

/**
 * DonationApi - object-oriented interface
 * @export
 * @class DonationApi
 * @extends {BaseAPI}
 */
export class DonationApi extends BaseAPI implements DonationApiInterface {
  /**
   *
   * @param {DonationApiDeleteDonationsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApi
   */
  public deleteDonationsId(
    requestParameters: DonationApiDeleteDonationsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonationApiFp(this.configuration)
      .deleteDonationsId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonationApiGetDonationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApi
   */
  public getDonations(
    requestParameters: DonationApiGetDonationsRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return DonationApiFp(this.configuration)
      .getDonations(
        requestParameters.sort,
        requestParameters.paginationWithCount,
        requestParameters.paginationPage,
        requestParameters.paginationPageSize,
        requestParameters.paginationStart,
        requestParameters.paginationLimit,
        requestParameters.fields,
        requestParameters.populate,
        requestParameters.filters,
        requestParameters.locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonationApiGetDonationsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApi
   */
  public getDonationsId(
    requestParameters: DonationApiGetDonationsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonationApiFp(this.configuration)
      .getDonationsId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonationApiPostDonationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApi
   */
  public postDonations(
    requestParameters: DonationApiPostDonationsRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonationApiFp(this.configuration)
      .postDonations(requestParameters.donationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonationApiPutDonationsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonationApi
   */
  public putDonationsId(
    requestParameters: DonationApiPutDonationsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonationApiFp(this.configuration)
      .putDonationsId(requestParameters.id, requestParameters.donationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DonorApi - axios parameter creator
 * @export
 */
export const DonorApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDonorsId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteDonorsId', 'id', id);
      const localVarPath = `/donors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonors: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/donors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter['pagination[page]'] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter['pagination[start]'] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter['pagination[limit]'] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter['populate'] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter['filters'] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter['locale'] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonorsId: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getDonorsId', 'id', id);
      const localVarPath = `/donors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {DonorRequest} donorRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDonors: async (
      donorRequest: DonorRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'donorRequest' is not null or undefined
      assertParamExists('postDonors', 'donorRequest', donorRequest);
      const localVarPath = `/donors`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        donorRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {DonorRequest} donorRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDonorsId: async (
      id: number,
      donorRequest: DonorRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putDonorsId', 'id', id);
      // verify required parameter 'donorRequest' is not null or undefined
      assertParamExists('putDonorsId', 'donorRequest', donorRequest);
      const localVarPath = `/donors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        donorRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DonorApi - functional programming interface
 * @export
 */
export const DonorApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DonorApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDonorsId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDonorsId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonorApi.deleteDonorsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDonors(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonorListResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDonors(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonorApi.getDonors']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDonorsId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonorResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDonorsId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonorApi.getDonorsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {DonorRequest} donorRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postDonors(
      donorRequest: DonorRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonorResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postDonors(donorRequest, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonorApi.postDonors']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {DonorRequest} donorRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putDonorsId(
      id: number,
      donorRequest: DonorRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DonorResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putDonorsId(
        id,
        donorRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['DonorApi.putDonorsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * DonorApi - factory interface
 * @export
 */
export const DonorApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = DonorApiFp(configuration);
  return {
    /**
     *
     * @param {DonorApiDeleteDonorsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDonorsId(
      requestParameters: DonorApiDeleteDonorsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<number> {
      return localVarFp
        .deleteDonorsId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonorApiGetDonorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonors(
      requestParameters: DonorApiGetDonorsRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonorListResponse> {
      return localVarFp
        .getDonors(
          requestParameters.sort,
          requestParameters.paginationWithCount,
          requestParameters.paginationPage,
          requestParameters.paginationPageSize,
          requestParameters.paginationStart,
          requestParameters.paginationLimit,
          requestParameters.fields,
          requestParameters.populate,
          requestParameters.filters,
          requestParameters.locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonorApiGetDonorsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDonorsId(
      requestParameters: DonorApiGetDonorsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonorResponse> {
      return localVarFp
        .getDonorsId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonorApiPostDonorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postDonors(
      requestParameters: DonorApiPostDonorsRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonorResponse> {
      return localVarFp
        .postDonors(requestParameters.donorRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {DonorApiPutDonorsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putDonorsId(
      requestParameters: DonorApiPutDonorsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<DonorResponse> {
      return localVarFp
        .putDonorsId(requestParameters.id, requestParameters.donorRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DonorApi - interface
 * @export
 * @interface DonorApi
 */
export interface DonorApiInterface {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApiInterface
   */
  deleteDonorsId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<number>;

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApiInterface
   */
  getDonors(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DonorListResponse>;

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApiInterface
   */
  getDonorsId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<DonorResponse>;

  /**
   *
   * @param {DonorRequest} donorRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApiInterface
   */
  postDonors(
    donorRequest: DonorRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DonorResponse>;

  /**
   *
   * @param {number} id
   * @param {DonorRequest} donorRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApiInterface
   */
  putDonorsId(
    id: number,
    donorRequest: DonorRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<DonorResponse>;
}

/**
 * Request parameters for deleteDonorsId operation in DonorApi.
 * @export
 * @interface DonorApiDeleteDonorsIdRequest
 */
export interface DonorApiDeleteDonorsIdRequest {
  /**
   *
   * @type {number}
   * @memberof DonorApiDeleteDonorsId
   */
  readonly id: number;
}

/**
 * Request parameters for getDonors operation in DonorApi.
 * @export
 * @interface DonorApiGetDonorsRequest
 */
export interface DonorApiGetDonorsRequest {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   * @type {string}
   * @memberof DonorApiGetDonors
   */
  readonly sort?: string;

  /**
   * Return page/pageSize (default: true)
   * @type {boolean}
   * @memberof DonorApiGetDonors
   */
  readonly paginationWithCount?: boolean;

  /**
   * Page number (default: 0)
   * @type {number}
   * @memberof DonorApiGetDonors
   */
  readonly paginationPage?: number;

  /**
   * Page size (default: 25)
   * @type {number}
   * @memberof DonorApiGetDonors
   */
  readonly paginationPageSize?: number;

  /**
   * Offset value (default: 0)
   * @type {number}
   * @memberof DonorApiGetDonors
   */
  readonly paginationStart?: number;

  /**
   * Number of entities to return (default: 25)
   * @type {number}
   * @memberof DonorApiGetDonors
   */
  readonly paginationLimit?: number;

  /**
   * Fields to return (ex: title,author)
   * @type {string}
   * @memberof DonorApiGetDonors
   */
  readonly fields?: string;

  /**
   * Relations to return
   * @type {string}
   * @memberof DonorApiGetDonors
   */
  readonly populate?: string;

  /**
   * Filters to apply
   * @type {object}
   * @memberof DonorApiGetDonors
   */
  readonly filters?: object;

  /**
   * Locale to apply
   * @type {string}
   * @memberof DonorApiGetDonors
   */
  readonly locale?: string;
}

/**
 * Request parameters for getDonorsId operation in DonorApi.
 * @export
 * @interface DonorApiGetDonorsIdRequest
 */
export interface DonorApiGetDonorsIdRequest {
  /**
   *
   * @type {number}
   * @memberof DonorApiGetDonorsId
   */
  readonly id: number;
}

/**
 * Request parameters for postDonors operation in DonorApi.
 * @export
 * @interface DonorApiPostDonorsRequest
 */
export interface DonorApiPostDonorsRequest {
  /**
   *
   * @type {DonorRequest}
   * @memberof DonorApiPostDonors
   */
  readonly donorRequest: DonorRequest;
}

/**
 * Request parameters for putDonorsId operation in DonorApi.
 * @export
 * @interface DonorApiPutDonorsIdRequest
 */
export interface DonorApiPutDonorsIdRequest {
  /**
   *
   * @type {number}
   * @memberof DonorApiPutDonorsId
   */
  readonly id: number;

  /**
   *
   * @type {DonorRequest}
   * @memberof DonorApiPutDonorsId
   */
  readonly donorRequest: DonorRequest;
}

/**
 * DonorApi - object-oriented interface
 * @export
 * @class DonorApi
 * @extends {BaseAPI}
 */
export class DonorApi extends BaseAPI implements DonorApiInterface {
  /**
   *
   * @param {DonorApiDeleteDonorsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApi
   */
  public deleteDonorsId(
    requestParameters: DonorApiDeleteDonorsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonorApiFp(this.configuration)
      .deleteDonorsId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonorApiGetDonorsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApi
   */
  public getDonors(
    requestParameters: DonorApiGetDonorsRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return DonorApiFp(this.configuration)
      .getDonors(
        requestParameters.sort,
        requestParameters.paginationWithCount,
        requestParameters.paginationPage,
        requestParameters.paginationPageSize,
        requestParameters.paginationStart,
        requestParameters.paginationLimit,
        requestParameters.fields,
        requestParameters.populate,
        requestParameters.filters,
        requestParameters.locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonorApiGetDonorsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApi
   */
  public getDonorsId(
    requestParameters: DonorApiGetDonorsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonorApiFp(this.configuration)
      .getDonorsId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonorApiPostDonorsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApi
   */
  public postDonors(requestParameters: DonorApiPostDonorsRequest, options?: RawAxiosRequestConfig) {
    return DonorApiFp(this.configuration)
      .postDonors(requestParameters.donorRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {DonorApiPutDonorsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DonorApi
   */
  public putDonorsId(
    requestParameters: DonorApiPutDonorsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return DonorApiFp(this.configuration)
      .putDonorsId(requestParameters.id, requestParameters.donorRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * OrganisationApi - axios parameter creator
 * @export
 */
export const OrganisationApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganisationsId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteOrganisationsId', 'id', id);
      const localVarPath = `/organisations/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisations: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/organisations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter['pagination[page]'] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter['pagination[start]'] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter['pagination[limit]'] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter['populate'] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter['filters'] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter['locale'] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisationsId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getOrganisationsId', 'id', id);
      const localVarPath = `/organisations/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {OrganisationRequest} organisationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganisations: async (
      organisationRequest: OrganisationRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'organisationRequest' is not null or undefined
      assertParamExists('postOrganisations', 'organisationRequest', organisationRequest);
      const localVarPath = `/organisations`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        organisationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {OrganisationRequest} organisationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrganisationsId: async (
      id: number,
      organisationRequest: OrganisationRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putOrganisationsId', 'id', id);
      // verify required parameter 'organisationRequest' is not null or undefined
      assertParamExists('putOrganisationsId', 'organisationRequest', organisationRequest);
      const localVarPath = `/organisations/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        organisationRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * OrganisationApi - functional programming interface
 * @export
 */
export const OrganisationApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = OrganisationApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteOrganisationsId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrganisationsId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['OrganisationApi.deleteOrganisationsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganisations(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganisationListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganisations(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['OrganisationApi.getOrganisations']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getOrganisationsId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganisationResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganisationsId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['OrganisationApi.getOrganisationsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {OrganisationRequest} organisationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postOrganisations(
      organisationRequest: OrganisationRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganisationResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postOrganisations(
        organisationRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['OrganisationApi.postOrganisations']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {OrganisationRequest} organisationRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putOrganisationsId(
      id: number,
      organisationRequest: OrganisationRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganisationResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putOrganisationsId(
        id,
        organisationRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['OrganisationApi.putOrganisationsId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * OrganisationApi - factory interface
 * @export
 */
export const OrganisationApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = OrganisationApiFp(configuration);
  return {
    /**
     *
     * @param {OrganisationApiDeleteOrganisationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteOrganisationsId(
      requestParameters: OrganisationApiDeleteOrganisationsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<number> {
      return localVarFp
        .deleteOrganisationsId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OrganisationApiGetOrganisationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisations(
      requestParameters: OrganisationApiGetOrganisationsRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OrganisationListResponse> {
      return localVarFp
        .getOrganisations(
          requestParameters.sort,
          requestParameters.paginationWithCount,
          requestParameters.paginationPage,
          requestParameters.paginationPageSize,
          requestParameters.paginationStart,
          requestParameters.paginationLimit,
          requestParameters.fields,
          requestParameters.populate,
          requestParameters.filters,
          requestParameters.locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OrganisationApiGetOrganisationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOrganisationsId(
      requestParameters: OrganisationApiGetOrganisationsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OrganisationResponse> {
      return localVarFp
        .getOrganisationsId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OrganisationApiPostOrganisationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postOrganisations(
      requestParameters: OrganisationApiPostOrganisationsRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OrganisationResponse> {
      return localVarFp
        .postOrganisations(requestParameters.organisationRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {OrganisationApiPutOrganisationsIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOrganisationsId(
      requestParameters: OrganisationApiPutOrganisationsIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<OrganisationResponse> {
      return localVarFp
        .putOrganisationsId(requestParameters.id, requestParameters.organisationRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * OrganisationApi - interface
 * @export
 * @interface OrganisationApi
 */
export interface OrganisationApiInterface {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApiInterface
   */
  deleteOrganisationsId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<number>;

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApiInterface
   */
  getOrganisations(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OrganisationListResponse>;

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApiInterface
   */
  getOrganisationsId(
    id: number,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OrganisationResponse>;

  /**
   *
   * @param {OrganisationRequest} organisationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApiInterface
   */
  postOrganisations(
    organisationRequest: OrganisationRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OrganisationResponse>;

  /**
   *
   * @param {number} id
   * @param {OrganisationRequest} organisationRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApiInterface
   */
  putOrganisationsId(
    id: number,
    organisationRequest: OrganisationRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<OrganisationResponse>;
}

/**
 * Request parameters for deleteOrganisationsId operation in OrganisationApi.
 * @export
 * @interface OrganisationApiDeleteOrganisationsIdRequest
 */
export interface OrganisationApiDeleteOrganisationsIdRequest {
  /**
   *
   * @type {number}
   * @memberof OrganisationApiDeleteOrganisationsId
   */
  readonly id: number;
}

/**
 * Request parameters for getOrganisations operation in OrganisationApi.
 * @export
 * @interface OrganisationApiGetOrganisationsRequest
 */
export interface OrganisationApiGetOrganisationsRequest {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   * @type {string}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly sort?: string;

  /**
   * Return page/pageSize (default: true)
   * @type {boolean}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly paginationWithCount?: boolean;

  /**
   * Page number (default: 0)
   * @type {number}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly paginationPage?: number;

  /**
   * Page size (default: 25)
   * @type {number}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly paginationPageSize?: number;

  /**
   * Offset value (default: 0)
   * @type {number}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly paginationStart?: number;

  /**
   * Number of entities to return (default: 25)
   * @type {number}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly paginationLimit?: number;

  /**
   * Fields to return (ex: title,author)
   * @type {string}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly fields?: string;

  /**
   * Relations to return
   * @type {string}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly populate?: string;

  /**
   * Filters to apply
   * @type {object}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly filters?: object;

  /**
   * Locale to apply
   * @type {string}
   * @memberof OrganisationApiGetOrganisations
   */
  readonly locale?: string;
}

/**
 * Request parameters for getOrganisationsId operation in OrganisationApi.
 * @export
 * @interface OrganisationApiGetOrganisationsIdRequest
 */
export interface OrganisationApiGetOrganisationsIdRequest {
  /**
   *
   * @type {number}
   * @memberof OrganisationApiGetOrganisationsId
   */
  readonly id: number;
}

/**
 * Request parameters for postOrganisations operation in OrganisationApi.
 * @export
 * @interface OrganisationApiPostOrganisationsRequest
 */
export interface OrganisationApiPostOrganisationsRequest {
  /**
   *
   * @type {OrganisationRequest}
   * @memberof OrganisationApiPostOrganisations
   */
  readonly organisationRequest: OrganisationRequest;
}

/**
 * Request parameters for putOrganisationsId operation in OrganisationApi.
 * @export
 * @interface OrganisationApiPutOrganisationsIdRequest
 */
export interface OrganisationApiPutOrganisationsIdRequest {
  /**
   *
   * @type {number}
   * @memberof OrganisationApiPutOrganisationsId
   */
  readonly id: number;

  /**
   *
   * @type {OrganisationRequest}
   * @memberof OrganisationApiPutOrganisationsId
   */
  readonly organisationRequest: OrganisationRequest;
}

/**
 * OrganisationApi - object-oriented interface
 * @export
 * @class OrganisationApi
 * @extends {BaseAPI}
 */
export class OrganisationApi extends BaseAPI implements OrganisationApiInterface {
  /**
   *
   * @param {OrganisationApiDeleteOrganisationsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApi
   */
  public deleteOrganisationsId(
    requestParameters: OrganisationApiDeleteOrganisationsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return OrganisationApiFp(this.configuration)
      .deleteOrganisationsId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {OrganisationApiGetOrganisationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApi
   */
  public getOrganisations(
    requestParameters: OrganisationApiGetOrganisationsRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return OrganisationApiFp(this.configuration)
      .getOrganisations(
        requestParameters.sort,
        requestParameters.paginationWithCount,
        requestParameters.paginationPage,
        requestParameters.paginationPageSize,
        requestParameters.paginationStart,
        requestParameters.paginationLimit,
        requestParameters.fields,
        requestParameters.populate,
        requestParameters.filters,
        requestParameters.locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {OrganisationApiGetOrganisationsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApi
   */
  public getOrganisationsId(
    requestParameters: OrganisationApiGetOrganisationsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return OrganisationApiFp(this.configuration)
      .getOrganisationsId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {OrganisationApiPostOrganisationsRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApi
   */
  public postOrganisations(
    requestParameters: OrganisationApiPostOrganisationsRequest,
    options?: RawAxiosRequestConfig
  ) {
    return OrganisationApiFp(this.configuration)
      .postOrganisations(requestParameters.organisationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {OrganisationApiPutOrganisationsIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof OrganisationApi
   */
  public putOrganisationsId(
    requestParameters: OrganisationApiPutOrganisationsIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return OrganisationApiFp(this.configuration)
      .putOrganisationsId(requestParameters.id, requestParameters.organisationRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ReceiptTemplateApi - axios parameter creator
 * @export
 */
export const ReceiptTemplateApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReceiptTemplatesId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('deleteReceiptTemplatesId', 'id', id);
      const localVarPath = `/receipt-templates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReceiptTemplates: async (
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/receipt-templates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (sort !== undefined) {
        localVarQueryParameter['sort'] = sort;
      }

      if (paginationWithCount !== undefined) {
        localVarQueryParameter['pagination[withCount]'] = paginationWithCount;
      }

      if (paginationPage !== undefined) {
        localVarQueryParameter['pagination[page]'] = paginationPage;
      }

      if (paginationPageSize !== undefined) {
        localVarQueryParameter['pagination[pageSize]'] = paginationPageSize;
      }

      if (paginationStart !== undefined) {
        localVarQueryParameter['pagination[start]'] = paginationStart;
      }

      if (paginationLimit !== undefined) {
        localVarQueryParameter['pagination[limit]'] = paginationLimit;
      }

      if (fields !== undefined) {
        localVarQueryParameter['fields'] = fields;
      }

      if (populate !== undefined) {
        localVarQueryParameter['populate'] = populate;
      }

      if (filters !== undefined) {
        localVarQueryParameter['filters'] = filters;
      }

      if (locale !== undefined) {
        localVarQueryParameter['locale'] = locale;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReceiptTemplatesId: async (
      id: number,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('getReceiptTemplatesId', 'id', id);
      const localVarPath = `/receipt-templates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {ReceiptTemplateRequest} receiptTemplateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReceiptTemplates: async (
      receiptTemplateRequest: ReceiptTemplateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'receiptTemplateRequest' is not null or undefined
      assertParamExists('postReceiptTemplates', 'receiptTemplateRequest', receiptTemplateRequest);
      const localVarPath = `/receipt-templates`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        receiptTemplateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {ReceiptTemplateRequest} receiptTemplateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putReceiptTemplatesId: async (
      id: number,
      receiptTemplateRequest: ReceiptTemplateRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('putReceiptTemplatesId', 'id', id);
      // verify required parameter 'receiptTemplateRequest' is not null or undefined
      assertParamExists('putReceiptTemplatesId', 'receiptTemplateRequest', receiptTemplateRequest);
      const localVarPath = `/receipt-templates/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        receiptTemplateRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ReceiptTemplateApi - functional programming interface
 * @export
 */
export const ReceiptTemplateApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ReceiptTemplateApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteReceiptTemplatesId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteReceiptTemplatesId(
        id,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['ReceiptTemplateApi.deleteReceiptTemplatesId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
     * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
     * @param {number} [paginationPage] Page number (default: 0)
     * @param {number} [paginationPageSize] Page size (default: 25)
     * @param {number} [paginationStart] Offset value (default: 0)
     * @param {number} [paginationLimit] Number of entities to return (default: 25)
     * @param {string} [fields] Fields to return (ex: title,author)
     * @param {string} [populate] Relations to return
     * @param {object} [filters] Filters to apply
     * @param {string} [locale] Locale to apply
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReceiptTemplates(
      sort?: string,
      paginationWithCount?: boolean,
      paginationPage?: number,
      paginationPageSize?: number,
      paginationStart?: number,
      paginationLimit?: number,
      fields?: string,
      populate?: string,
      filters?: object,
      locale?: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptTemplateListResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReceiptTemplates(
        sort,
        paginationWithCount,
        paginationPage,
        paginationPageSize,
        paginationStart,
        paginationLimit,
        fields,
        populate,
        filters,
        locale,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['ReceiptTemplateApi.getReceiptTemplates']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReceiptTemplatesId(
      id: number,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptTemplateResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReceiptTemplatesId(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['ReceiptTemplateApi.getReceiptTemplatesId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {ReceiptTemplateRequest} receiptTemplateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async postReceiptTemplates(
      receiptTemplateRequest: ReceiptTemplateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptTemplateResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.postReceiptTemplates(
        receiptTemplateRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['ReceiptTemplateApi.postReceiptTemplates']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {number} id
     * @param {ReceiptTemplateRequest} receiptTemplateRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async putReceiptTemplatesId(
      id: number,
      receiptTemplateRequest: ReceiptTemplateRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReceiptTemplateResponse>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.putReceiptTemplatesId(
        id,
        receiptTemplateRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['ReceiptTemplateApi.putReceiptTemplatesId']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * ReceiptTemplateApi - factory interface
 * @export
 */
export const ReceiptTemplateApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = ReceiptTemplateApiFp(configuration);
  return {
    /**
     *
     * @param {ReceiptTemplateApiDeleteReceiptTemplatesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteReceiptTemplatesId(
      requestParameters: ReceiptTemplateApiDeleteReceiptTemplatesIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<number> {
      return localVarFp
        .deleteReceiptTemplatesId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ReceiptTemplateApiGetReceiptTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReceiptTemplates(
      requestParameters: ReceiptTemplateApiGetReceiptTemplatesRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ReceiptTemplateListResponse> {
      return localVarFp
        .getReceiptTemplates(
          requestParameters.sort,
          requestParameters.paginationWithCount,
          requestParameters.paginationPage,
          requestParameters.paginationPageSize,
          requestParameters.paginationStart,
          requestParameters.paginationLimit,
          requestParameters.fields,
          requestParameters.populate,
          requestParameters.filters,
          requestParameters.locale,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ReceiptTemplateApiGetReceiptTemplatesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReceiptTemplatesId(
      requestParameters: ReceiptTemplateApiGetReceiptTemplatesIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ReceiptTemplateResponse> {
      return localVarFp
        .getReceiptTemplatesId(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ReceiptTemplateApiPostReceiptTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postReceiptTemplates(
      requestParameters: ReceiptTemplateApiPostReceiptTemplatesRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ReceiptTemplateResponse> {
      return localVarFp
        .postReceiptTemplates(requestParameters.receiptTemplateRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {ReceiptTemplateApiPutReceiptTemplatesIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putReceiptTemplatesId(
      requestParameters: ReceiptTemplateApiPutReceiptTemplatesIdRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<ReceiptTemplateResponse> {
      return localVarFp
        .putReceiptTemplatesId(
          requestParameters.id,
          requestParameters.receiptTemplateRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ReceiptTemplateApi - interface
 * @export
 * @interface ReceiptTemplateApi
 */
export interface ReceiptTemplateApiInterface {
  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApiInterface
   */
  deleteReceiptTemplatesId(id: number, options?: RawAxiosRequestConfig): AxiosPromise<number>;

  /**
   *
   * @param {string} [sort] Sort by attributes ascending (asc) or descending (desc)
   * @param {boolean} [paginationWithCount] Return page/pageSize (default: true)
   * @param {number} [paginationPage] Page number (default: 0)
   * @param {number} [paginationPageSize] Page size (default: 25)
   * @param {number} [paginationStart] Offset value (default: 0)
   * @param {number} [paginationLimit] Number of entities to return (default: 25)
   * @param {string} [fields] Fields to return (ex: title,author)
   * @param {string} [populate] Relations to return
   * @param {object} [filters] Filters to apply
   * @param {string} [locale] Locale to apply
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApiInterface
   */
  getReceiptTemplates(
    sort?: string,
    paginationWithCount?: boolean,
    paginationPage?: number,
    paginationPageSize?: number,
    paginationStart?: number,
    paginationLimit?: number,
    fields?: string,
    populate?: string,
    filters?: object,
    locale?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ReceiptTemplateListResponse>;

  /**
   *
   * @param {number} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApiInterface
   */
  getReceiptTemplatesId(
    id: number,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ReceiptTemplateResponse>;

  /**
   *
   * @param {ReceiptTemplateRequest} receiptTemplateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApiInterface
   */
  postReceiptTemplates(
    receiptTemplateRequest: ReceiptTemplateRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ReceiptTemplateResponse>;

  /**
   *
   * @param {number} id
   * @param {ReceiptTemplateRequest} receiptTemplateRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApiInterface
   */
  putReceiptTemplatesId(
    id: number,
    receiptTemplateRequest: ReceiptTemplateRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<ReceiptTemplateResponse>;
}

/**
 * Request parameters for deleteReceiptTemplatesId operation in ReceiptTemplateApi.
 * @export
 * @interface ReceiptTemplateApiDeleteReceiptTemplatesIdRequest
 */
export interface ReceiptTemplateApiDeleteReceiptTemplatesIdRequest {
  /**
   *
   * @type {number}
   * @memberof ReceiptTemplateApiDeleteReceiptTemplatesId
   */
  readonly id: number;
}

/**
 * Request parameters for getReceiptTemplates operation in ReceiptTemplateApi.
 * @export
 * @interface ReceiptTemplateApiGetReceiptTemplatesRequest
 */
export interface ReceiptTemplateApiGetReceiptTemplatesRequest {
  /**
   * Sort by attributes ascending (asc) or descending (desc)
   * @type {string}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly sort?: string;

  /**
   * Return page/pageSize (default: true)
   * @type {boolean}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly paginationWithCount?: boolean;

  /**
   * Page number (default: 0)
   * @type {number}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly paginationPage?: number;

  /**
   * Page size (default: 25)
   * @type {number}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly paginationPageSize?: number;

  /**
   * Offset value (default: 0)
   * @type {number}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly paginationStart?: number;

  /**
   * Number of entities to return (default: 25)
   * @type {number}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly paginationLimit?: number;

  /**
   * Fields to return (ex: title,author)
   * @type {string}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly fields?: string;

  /**
   * Relations to return
   * @type {string}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly populate?: string;

  /**
   * Filters to apply
   * @type {object}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly filters?: object;

  /**
   * Locale to apply
   * @type {string}
   * @memberof ReceiptTemplateApiGetReceiptTemplates
   */
  readonly locale?: string;
}

/**
 * Request parameters for getReceiptTemplatesId operation in ReceiptTemplateApi.
 * @export
 * @interface ReceiptTemplateApiGetReceiptTemplatesIdRequest
 */
export interface ReceiptTemplateApiGetReceiptTemplatesIdRequest {
  /**
   *
   * @type {number}
   * @memberof ReceiptTemplateApiGetReceiptTemplatesId
   */
  readonly id: number;
}

/**
 * Request parameters for postReceiptTemplates operation in ReceiptTemplateApi.
 * @export
 * @interface ReceiptTemplateApiPostReceiptTemplatesRequest
 */
export interface ReceiptTemplateApiPostReceiptTemplatesRequest {
  /**
   *
   * @type {ReceiptTemplateRequest}
   * @memberof ReceiptTemplateApiPostReceiptTemplates
   */
  readonly receiptTemplateRequest: ReceiptTemplateRequest;
}

/**
 * Request parameters for putReceiptTemplatesId operation in ReceiptTemplateApi.
 * @export
 * @interface ReceiptTemplateApiPutReceiptTemplatesIdRequest
 */
export interface ReceiptTemplateApiPutReceiptTemplatesIdRequest {
  /**
   *
   * @type {number}
   * @memberof ReceiptTemplateApiPutReceiptTemplatesId
   */
  readonly id: number;

  /**
   *
   * @type {ReceiptTemplateRequest}
   * @memberof ReceiptTemplateApiPutReceiptTemplatesId
   */
  readonly receiptTemplateRequest: ReceiptTemplateRequest;
}

/**
 * ReceiptTemplateApi - object-oriented interface
 * @export
 * @class ReceiptTemplateApi
 * @extends {BaseAPI}
 */
export class ReceiptTemplateApi extends BaseAPI implements ReceiptTemplateApiInterface {
  /**
   *
   * @param {ReceiptTemplateApiDeleteReceiptTemplatesIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApi
   */
  public deleteReceiptTemplatesId(
    requestParameters: ReceiptTemplateApiDeleteReceiptTemplatesIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReceiptTemplateApiFp(this.configuration)
      .deleteReceiptTemplatesId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ReceiptTemplateApiGetReceiptTemplatesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApi
   */
  public getReceiptTemplates(
    requestParameters: ReceiptTemplateApiGetReceiptTemplatesRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return ReceiptTemplateApiFp(this.configuration)
      .getReceiptTemplates(
        requestParameters.sort,
        requestParameters.paginationWithCount,
        requestParameters.paginationPage,
        requestParameters.paginationPageSize,
        requestParameters.paginationStart,
        requestParameters.paginationLimit,
        requestParameters.fields,
        requestParameters.populate,
        requestParameters.filters,
        requestParameters.locale,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ReceiptTemplateApiGetReceiptTemplatesIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApi
   */
  public getReceiptTemplatesId(
    requestParameters: ReceiptTemplateApiGetReceiptTemplatesIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReceiptTemplateApiFp(this.configuration)
      .getReceiptTemplatesId(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ReceiptTemplateApiPostReceiptTemplatesRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApi
   */
  public postReceiptTemplates(
    requestParameters: ReceiptTemplateApiPostReceiptTemplatesRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReceiptTemplateApiFp(this.configuration)
      .postReceiptTemplates(requestParameters.receiptTemplateRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {ReceiptTemplateApiPutReceiptTemplatesIdRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ReceiptTemplateApi
   */
  public putReceiptTemplatesId(
    requestParameters: ReceiptTemplateApiPutReceiptTemplatesIdRequest,
    options?: RawAxiosRequestConfig
  ) {
    return ReceiptTemplateApiFp(this.configuration)
      .putReceiptTemplatesId(
        requestParameters.id,
        requestParameters.receiptTemplateRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UploadFileApi - axios parameter creator
 * @export
 */
export const UploadFileApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/upload/files`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('uploadFilesIdDelete', 'id', id);
      const localVarPath = `/upload/files/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('uploadFilesIdGet', 'id', id);
      const localVarPath = `/upload/files/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Upload files
     * @summary
     * @param {Array<File>} files
     * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @param {string} [refId] The ID of the entry which the file(s) will be linked to
     * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPost: async (
      files: Array<File>,
      path?: string,
      refId?: string,
      ref?: string,
      field?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'files' is not null or undefined
      assertParamExists('uploadPost', 'files', files);
      const localVarPath = `/upload`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (path !== undefined) {
        localVarFormParams.append('path', path as any);
      }

      if (refId !== undefined) {
        localVarFormParams.append('refId', refId as any);
      }

      if (ref !== undefined) {
        localVarFormParams.append('ref', ref as any);
      }

      if (field !== undefined) {
        localVarFormParams.append('field', field as any);
      }
      if (files) {
        files.forEach((element) => {
          localVarFormParams.append('files', element as any);
        });
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Upload file information
     * @summary
     * @param {string} id File id
     * @param {UploadIdIdPostRequestFileInfo} [fileInfo]
     * @param {File} [files]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadididPost: async (
      id: string,
      fileInfo?: UploadIdIdPostRequestFileInfo,
      files?: File,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('uploadididPost', 'id', id);
      const localVarPath = `/upload?id={id}`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;
      const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (id !== undefined) {
        localVarQueryParameter['id'] = id;
      }

      if (fileInfo !== undefined) {
        localVarFormParams.append(
          'fileInfo',
          new Blob([JSON.stringify(fileInfo)], { type: 'application/json' })
        );
      }

      if (files !== undefined) {
        localVarFormParams.append('files', files as any);
      }

      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = localVarFormParams;

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UploadFileApi - functional programming interface
 * @export
 */
export const UploadFileApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UploadFileApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilesGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['UploadFileApi.uploadFilesGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilesIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdDelete(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UploadFileApi.uploadFilesIdDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadFilesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadFile>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadFilesIdGet(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['UploadFileApi.uploadFilesIdGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     * Upload files
     * @summary
     * @param {Array<File>} files
     * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
     * @param {string} [refId] The ID of the entry which the file(s) will be linked to
     * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
     * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadPost(
      files: Array<File>,
      path?: string,
      refId?: string,
      ref?: string,
      field?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadPost(
        files,
        path,
        refId,
        ref,
        field,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['UploadFileApi.uploadPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     * Upload file information
     * @summary
     * @param {string} id File id
     * @param {UploadIdIdPostRequestFileInfo} [fileInfo]
     * @param {File} [files]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async uploadididPost(
      id: string,
      fileInfo?: UploadIdIdPostRequestFileInfo,
      files?: File,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UploadFile>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.uploadididPost(
        id,
        fileInfo,
        files,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath = operationServerMap['UploadFileApi.uploadididPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * UploadFileApi - factory interface
 * @export
 */
export const UploadFileApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UploadFileApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>> {
      return localVarFp.uploadFilesGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdDelete(
      requestParameters: UploadFileApiUploadFilesIdDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UploadFile> {
      return localVarFp
        .uploadFilesIdDelete(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadFilesIdGet(
      requestParameters: UploadFileApiUploadFilesIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UploadFile> {
      return localVarFp
        .uploadFilesIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Upload files
     * @summary
     * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPost(
      requestParameters: UploadFileApiUploadPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<UploadFile>> {
      return localVarFp
        .uploadPost(
          requestParameters.files,
          requestParameters.path,
          requestParameters.refId,
          requestParameters.ref,
          requestParameters.field,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     * Upload file information
     * @summary
     * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadididPost(
      requestParameters: UploadFileApiUploadididPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Array<UploadFile>> {
      return localVarFp
        .uploadididPost(
          requestParameters.id,
          requestParameters.fileInfo,
          requestParameters.files,
          options
        )
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UploadFileApi - interface
 * @export
 * @interface UploadFileApi
 */
export interface UploadFileApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApiInterface
   */
  uploadFilesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UploadFile>>;

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApiInterface
   */
  uploadFilesIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile>;

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApiInterface
   */
  uploadFilesIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UploadFile>;

  /**
   * Upload files
   * @summary
   * @param {Array<File>} files
   * @param {string} [path] The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
   * @param {string} [refId] The ID of the entry which the file(s) will be linked to
   * @param {string} [ref] The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
   * @param {string} [field] The field of the entry which the file(s) will be precisely linked to.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApiInterface
   */
  uploadPost(
    files: Array<File>,
    path?: string,
    refId?: string,
    ref?: string,
    field?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<UploadFile>>;

  /**
   * Upload file information
   * @summary
   * @param {string} id File id
   * @param {UploadIdIdPostRequestFileInfo} [fileInfo]
   * @param {File} [files]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApiInterface
   */
  uploadididPost(
    id: string,
    fileInfo?: UploadIdIdPostRequestFileInfo,
    files?: File,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Array<UploadFile>>;
}

/**
 * Request parameters for uploadFilesIdDelete operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdDeleteRequest
 */
export interface UploadFileApiUploadFilesIdDeleteRequest {
  /**
   *
   * @type {string}
   * @memberof UploadFileApiUploadFilesIdDelete
   */
  readonly id: string;
}

/**
 * Request parameters for uploadFilesIdGet operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadFilesIdGetRequest
 */
export interface UploadFileApiUploadFilesIdGetRequest {
  /**
   *
   * @type {string}
   * @memberof UploadFileApiUploadFilesIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for uploadPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadPostRequest
 */
export interface UploadFileApiUploadPostRequest {
  /**
   *
   * @type {Array<File>}
   * @memberof UploadFileApiUploadPost
   */
  readonly files: Array<File>;

  /**
   * The folder where the file(s) will be uploaded to (only supported on strapi-provider-upload-aws-s3).
   * @type {string}
   * @memberof UploadFileApiUploadPost
   */
  readonly path?: string;

  /**
   * The ID of the entry which the file(s) will be linked to
   * @type {string}
   * @memberof UploadFileApiUploadPost
   */
  readonly refId?: string;

  /**
   * The unique ID (uid) of the model which the file(s) will be linked to (api::restaurant.restaurant).
   * @type {string}
   * @memberof UploadFileApiUploadPost
   */
  readonly ref?: string;

  /**
   * The field of the entry which the file(s) will be precisely linked to.
   * @type {string}
   * @memberof UploadFileApiUploadPost
   */
  readonly field?: string;
}

/**
 * Request parameters for uploadididPost operation in UploadFileApi.
 * @export
 * @interface UploadFileApiUploadididPostRequest
 */
export interface UploadFileApiUploadididPostRequest {
  /**
   * File id
   * @type {string}
   * @memberof UploadFileApiUploadididPost
   */
  readonly id: string;

  /**
   *
   * @type {UploadIdIdPostRequestFileInfo}
   * @memberof UploadFileApiUploadididPost
   */
  readonly fileInfo?: UploadIdIdPostRequestFileInfo;

  /**
   *
   * @type {File}
   * @memberof UploadFileApiUploadididPost
   */
  readonly files?: File;
}

/**
 * UploadFileApi - object-oriented interface
 * @export
 * @class UploadFileApi
 * @extends {BaseAPI}
 */
export class UploadFileApi extends BaseAPI implements UploadFileApiInterface {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadFilesGet(options?: RawAxiosRequestConfig) {
    return UploadFileApiFp(this.configuration)
      .uploadFilesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UploadFileApiUploadFilesIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadFilesIdDelete(
    requestParameters: UploadFileApiUploadFilesIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UploadFileApiFp(this.configuration)
      .uploadFilesIdDelete(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {UploadFileApiUploadFilesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadFilesIdGet(
    requestParameters: UploadFileApiUploadFilesIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UploadFileApiFp(this.configuration)
      .uploadFilesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Upload files
   * @summary
   * @param {UploadFileApiUploadPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadPost(
    requestParameters: UploadFileApiUploadPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UploadFileApiFp(this.configuration)
      .uploadPost(
        requestParameters.files,
        requestParameters.path,
        requestParameters.refId,
        requestParameters.ref,
        requestParameters.field,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Upload file information
   * @summary
   * @param {UploadFileApiUploadididPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UploadFileApi
   */
  public uploadididPost(
    requestParameters: UploadFileApiUploadididPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UploadFileApiFp(this.configuration)
      .uploadididPost(
        requestParameters.id,
        requestParameters.fileInfo,
        requestParameters.files,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersPermissionsAuthApi - axios parameter creator
 * @export
 */
export const UsersPermissionsAuthApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authChangePasswordPost: async (
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authChangePasswordPostRequest' is not null or undefined
      assertParamExists(
        'authChangePasswordPost',
        'authChangePasswordPostRequest',
        authChangePasswordPostRequest
      );
      const localVarPath = `/auth/change-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authChangePasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authEmailConfirmationGet: async (
      confirmation?: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/auth/email-confirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (confirmation !== undefined) {
        localVarQueryParameter['confirmation'] = confirmation;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgotPasswordPost: async (
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
      assertParamExists(
        'authForgotPasswordPost',
        'authForgotPasswordPostRequest',
        authForgotPasswordPostRequest
      );
      const localVarPath = `/auth/forgot-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authForgotPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalPost: async (
      authLocalPostRequest: AuthLocalPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authLocalPostRequest' is not null or undefined
      assertParamExists('authLocalPost', 'authLocalPostRequest', authLocalPostRequest);
      const localVarPath = `/auth/local`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authLocalPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalRegisterPost: async (
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authLocalRegisterPostRequest' is not null or undefined
      assertParamExists(
        'authLocalRegisterPost',
        'authLocalRegisterPostRequest',
        authLocalRegisterPostRequest
      );
      const localVarPath = `/auth/local/register`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authLocalRegisterPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet: async (
      provider: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'provider' is not null or undefined
      assertParamExists('authProviderCallbackGet', 'provider', provider);
      const localVarPath = `/auth/{provider}/callback`.replace(
        `{${'provider'}}`,
        encodeURIComponent(String(provider))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authResetPasswordPost: async (
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authResetPasswordPostRequest' is not null or undefined
      assertParamExists(
        'authResetPasswordPost',
        'authResetPasswordPostRequest',
        authResetPasswordPostRequest
      );
      const localVarPath = `/auth/reset-password`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authResetPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendEmailConfirmationPost: async (
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'authForgotPasswordPostRequest' is not null or undefined
      assertParamExists(
        'authSendEmailConfirmationPost',
        'authForgotPasswordPostRequest',
        authForgotPasswordPostRequest
      );
      const localVarPath = `/auth/send-email-confirmation`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        authForgotPasswordPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectProviderGet: async (
      provider: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'provider' is not null or undefined
      assertParamExists('connectProviderGet', 'provider', provider);
      const localVarPath = `/connect/{provider}`.replace(
        `{${'provider'}}`,
        encodeURIComponent(String(provider))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersPermissionsAuthApi - functional programming interface
 * @export
 */
export const UsersPermissionsAuthApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersPermissionsAuthApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authChangePasswordPost(
      authChangePasswordPostRequest: AuthChangePasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authChangePasswordPost(
        authChangePasswordPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authChangePasswordPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Confirm user email
     * @param {string} [confirmation] confirmation token received by email
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authEmailConfirmationGet(
      confirmation?: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authEmailConfirmationGet(
        confirmation,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authEmailConfirmationGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Send rest password email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authForgotPasswordPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authForgotPasswordPost(
        authForgotPasswordPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authForgotPasswordPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {AuthLocalPostRequest} authLocalPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLocalPost(
      authLocalPostRequest: AuthLocalPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalPost(
        authLocalPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authLocalPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authLocalRegisterPost(
      authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authLocalRegisterPost(
        authLocalRegisterPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authLocalRegisterPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authProviderCallbackGet(
      provider: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authProviderCallbackGet(
        provider,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authProviderCallbackGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Rest user password
     * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authResetPasswordPost(
      authResetPasswordPostRequest: AuthResetPasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUserRegistration>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPasswordPost(
        authResetPasswordPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authResetPasswordPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Send confirmation email
     * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authSendEmailConfirmationPost(
      authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<AuthSendEmailConfirmationPost200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.authSendEmailConfirmationPost(
        authForgotPasswordPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.authSendEmailConfirmationPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {string} provider Provider name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async connectProviderGet(
      provider: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.connectProviderGet(
        provider,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsAuthApi.connectProviderGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * UsersPermissionsAuthApi - factory interface
 * @export
 */
export const UsersPermissionsAuthApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersPermissionsAuthApiFp(configuration);
  return {
    /**
     *
     * @summary Update user\'s own password
     * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authChangePasswordPost(
      requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Confirm user email
     * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authEmailConfirmationGet(
      requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {},
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Error> {
      return localVarFp
        .authEmailConfirmationGet(requestParameters.confirmation, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send rest password email
     * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authForgotPasswordPost(
      requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a jwt token and user info
     * @summary Local login
     * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalPost(
      requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authLocalPost(requestParameters.authLocalPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Returns a jwt token and user info
     * @summary Register a user
     * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authLocalRegisterPost(
      requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Default Callback from provider auth
     * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authProviderCallbackGet(
      requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authProviderCallbackGet(requestParameters.provider, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Rest user password
     * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authResetPasswordPost(
      requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUserRegistration> {
      return localVarFp
        .authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Send confirmation email
     * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authSendEmailConfirmationPost(
      requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthSendEmailConfirmationPost200Response> {
      return localVarFp
        .authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * Redirects to provider login before being redirect to /auth/{provider}/callback
     * @summary Login with a provider
     * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    connectProviderGet(
      requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<Error> {
      return localVarFp
        .connectProviderGet(requestParameters.provider, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersPermissionsAuthApi - interface
 * @export
 * @interface UsersPermissionsAuthApi
 */
export interface UsersPermissionsAuthApiInterface {
  /**
   *
   * @summary Update user\'s own password
   * @param {AuthChangePasswordPostRequest} authChangePasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authChangePasswordPost(
    authChangePasswordPostRequest: AuthChangePasswordPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsUserRegistration>;

  /**
   *
   * @summary Confirm user email
   * @param {string} [confirmation] confirmation token received by email
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authEmailConfirmationGet(
    confirmation?: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<Error>;

  /**
   *
   * @summary Send rest password email
   * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authForgotPasswordPost(
    authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthForgotPasswordPost200Response>;

  /**
   * Returns a jwt token and user info
   * @summary Local login
   * @param {AuthLocalPostRequest} authLocalPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authLocalPost(
    authLocalPostRequest: AuthLocalPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsUserRegistration>;

  /**
   * Returns a jwt token and user info
   * @summary Register a user
   * @param {AuthLocalRegisterPostRequest} authLocalRegisterPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authLocalRegisterPost(
    authLocalRegisterPostRequest: AuthLocalRegisterPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsUserRegistration>;

  /**
   *
   * @summary Default Callback from provider auth
   * @param {string} provider Provider name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authProviderCallbackGet(
    provider: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsUserRegistration>;

  /**
   *
   * @summary Rest user password
   * @param {AuthResetPasswordPostRequest} authResetPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authResetPasswordPost(
    authResetPasswordPostRequest: AuthResetPasswordPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsUserRegistration>;

  /**
   *
   * @summary Send confirmation email
   * @param {AuthForgotPasswordPostRequest} authForgotPasswordPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  authSendEmailConfirmationPost(
    authForgotPasswordPostRequest: AuthForgotPasswordPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthSendEmailConfirmationPost200Response>;

  /**
   * Redirects to provider login before being redirect to /auth/{provider}/callback
   * @summary Login with a provider
   * @param {string} provider Provider name
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApiInterface
   */
  connectProviderGet(provider: string, options?: RawAxiosRequestConfig): AxiosPromise<Error>;
}

/**
 * Request parameters for authChangePasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthChangePasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthChangePasswordPostRequest {
  /**
   *
   * @type {AuthChangePasswordPostRequest}
   * @memberof UsersPermissionsAuthApiAuthChangePasswordPost
   */
  readonly authChangePasswordPostRequest: AuthChangePasswordPostRequest;
}

/**
 * Request parameters for authEmailConfirmationGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest
 */
export interface UsersPermissionsAuthApiAuthEmailConfirmationGetRequest {
  /**
   * confirmation token received by email
   * @type {string}
   * @memberof UsersPermissionsAuthApiAuthEmailConfirmationGet
   */
  readonly confirmation?: string;
}

/**
 * Request parameters for authForgotPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthForgotPasswordPostRequest {
  /**
   *
   * @type {AuthForgotPasswordPostRequest}
   * @memberof UsersPermissionsAuthApiAuthForgotPasswordPost
   */
  readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest;
}

/**
 * Request parameters for authLocalPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalPostRequest {
  /**
   *
   * @type {AuthLocalPostRequest}
   * @memberof UsersPermissionsAuthApiAuthLocalPost
   */
  readonly authLocalPostRequest: AuthLocalPostRequest;
}

/**
 * Request parameters for authLocalRegisterPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest
 */
export interface UsersPermissionsAuthApiAuthLocalRegisterPostRequest {
  /**
   *
   * @type {AuthLocalRegisterPostRequest}
   * @memberof UsersPermissionsAuthApiAuthLocalRegisterPost
   */
  readonly authLocalRegisterPostRequest: AuthLocalRegisterPostRequest;
}

/**
 * Request parameters for authProviderCallbackGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest
 */
export interface UsersPermissionsAuthApiAuthProviderCallbackGetRequest {
  /**
   * Provider name
   * @type {string}
   * @memberof UsersPermissionsAuthApiAuthProviderCallbackGet
   */
  readonly provider: string;
}

/**
 * Request parameters for authResetPasswordPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthResetPasswordPostRequest
 */
export interface UsersPermissionsAuthApiAuthResetPasswordPostRequest {
  /**
   *
   * @type {AuthResetPasswordPostRequest}
   * @memberof UsersPermissionsAuthApiAuthResetPasswordPost
   */
  readonly authResetPasswordPostRequest: AuthResetPasswordPostRequest;
}

/**
 * Request parameters for authSendEmailConfirmationPost operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest
 */
export interface UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest {
  /**
   *
   * @type {AuthForgotPasswordPostRequest}
   * @memberof UsersPermissionsAuthApiAuthSendEmailConfirmationPost
   */
  readonly authForgotPasswordPostRequest: AuthForgotPasswordPostRequest;
}

/**
 * Request parameters for connectProviderGet operation in UsersPermissionsAuthApi.
 * @export
 * @interface UsersPermissionsAuthApiConnectProviderGetRequest
 */
export interface UsersPermissionsAuthApiConnectProviderGetRequest {
  /**
   * Provider name
   * @type {string}
   * @memberof UsersPermissionsAuthApiConnectProviderGet
   */
  readonly provider: string;
}

/**
 * UsersPermissionsAuthApi - object-oriented interface
 * @export
 * @class UsersPermissionsAuthApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsAuthApi extends BaseAPI implements UsersPermissionsAuthApiInterface {
  /**
   *
   * @summary Update user\'s own password
   * @param {UsersPermissionsAuthApiAuthChangePasswordPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authChangePasswordPost(
    requestParameters: UsersPermissionsAuthApiAuthChangePasswordPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authChangePasswordPost(requestParameters.authChangePasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Confirm user email
   * @param {UsersPermissionsAuthApiAuthEmailConfirmationGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authEmailConfirmationGet(
    requestParameters: UsersPermissionsAuthApiAuthEmailConfirmationGetRequest = {},
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authEmailConfirmationGet(requestParameters.confirmation, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send rest password email
   * @param {UsersPermissionsAuthApiAuthForgotPasswordPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authForgotPasswordPost(
    requestParameters: UsersPermissionsAuthApiAuthForgotPasswordPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authForgotPasswordPost(requestParameters.authForgotPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a jwt token and user info
   * @summary Local login
   * @param {UsersPermissionsAuthApiAuthLocalPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authLocalPost(
    requestParameters: UsersPermissionsAuthApiAuthLocalPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authLocalPost(requestParameters.authLocalPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Returns a jwt token and user info
   * @summary Register a user
   * @param {UsersPermissionsAuthApiAuthLocalRegisterPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authLocalRegisterPost(
    requestParameters: UsersPermissionsAuthApiAuthLocalRegisterPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authLocalRegisterPost(requestParameters.authLocalRegisterPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Default Callback from provider auth
   * @param {UsersPermissionsAuthApiAuthProviderCallbackGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authProviderCallbackGet(
    requestParameters: UsersPermissionsAuthApiAuthProviderCallbackGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authProviderCallbackGet(requestParameters.provider, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Rest user password
   * @param {UsersPermissionsAuthApiAuthResetPasswordPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authResetPasswordPost(
    requestParameters: UsersPermissionsAuthApiAuthResetPasswordPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authResetPasswordPost(requestParameters.authResetPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Send confirmation email
   * @param {UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public authSendEmailConfirmationPost(
    requestParameters: UsersPermissionsAuthApiAuthSendEmailConfirmationPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .authSendEmailConfirmationPost(requestParameters.authForgotPasswordPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * Redirects to provider login before being redirect to /auth/{provider}/callback
   * @summary Login with a provider
   * @param {UsersPermissionsAuthApiConnectProviderGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsAuthApi
   */
  public connectProviderGet(
    requestParameters: UsersPermissionsAuthApiConnectProviderGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsAuthApiFp(this.configuration)
      .connectProviderGet(requestParameters.provider, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UsersPermissionsUsersRolesApi - axios parameter creator
 * @export
 */
export const UsersPermissionsUsersRolesApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCountGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/count`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdDelete: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdDelete', 'id', id);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdGet', 'id', id);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut: async (
      id: string,
      usersPostRequest: UsersPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersIdPut', 'id', id);
      // verify required parameter 'usersPostRequest' is not null or undefined
      assertParamExists('usersIdPut', 'usersPostRequest', usersPostRequest);
      const localVarPath = `/users/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsPermissionsGet: async (
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/users-permissions/permissions`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/users-permissions/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesIdGet: async (
      id: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists('usersPermissionsRolesIdGet', 'id', id);
      const localVarPath = `/users-permissions/roles/{id}`.replace(
        `{${'id'}}`,
        encodeURIComponent(String(id))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesPost: async (
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
      assertParamExists(
        'usersPermissionsRolesPost',
        'usersPermissionsRolesPostRequest',
        usersPermissionsRolesPostRequest
      );
      const localVarPath = `/users-permissions/roles`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPermissionsRolesPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRoleDelete: async (
      role: string,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'role' is not null or undefined
      assertParamExists('usersPermissionsRolesRoleDelete', 'role', role);
      const localVarPath = `/users-permissions/roles/{role}`.replace(
        `{${'role'}}`,
        encodeURIComponent(String(role))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRolePut: async (
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'role' is not null or undefined
      assertParamExists('usersPermissionsRolesRolePut', 'role', role);
      // verify required parameter 'usersPermissionsRolesPostRequest' is not null or undefined
      assertParamExists(
        'usersPermissionsRolesRolePut',
        'usersPermissionsRolesPostRequest',
        usersPermissionsRolesPostRequest
      );
      const localVarPath = `/users-permissions/roles/{role}`.replace(
        `{${'role'}}`,
        encodeURIComponent(String(role))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPermissionsRolesPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost: async (
      usersPostRequest: UsersPostRequest,
      options: RawAxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'usersPostRequest' is not null or undefined
      assertParamExists('usersPost', 'usersPostRequest', usersPostRequest);
      const localVarPath = `/users`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication bearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        usersPostRequest,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - functional programming interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UsersPermissionsUsersRolesApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersCountGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersCountGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersCountGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsersPermissionsUser>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Delete a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdDelete(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdDelete(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersIdDelete']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get a user
     * @param {string} id user Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdGet(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersIdGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update a user
     * @param {string} id user Id
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersIdPut(
      id: string,
      usersPostRequest: UsersPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersIdPut(
        id,
        usersPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersIdPut']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersMeGet(
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPermissionsUser>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersMeGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsPermissionsGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsPermissionsGet200Response>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.usersPermissionsPermissionsGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsPermissionsGet']?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesGet(
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesGet']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Get a role
     * @param {string} id role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesIdGet(
      id: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<UsersPermissionsRolesIdGet200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesIdGet(
        id,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesIdGet']?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesPost(
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesPost(
        usersPermissionsRolesPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Delete a role
     * @param {string} role role Id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesRoleDelete(
      role: string,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRoleDelete(
        role,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesRoleDelete']?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update a role
     * @param {string} role role Id
     * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPermissionsRolesRolePut(
      role: string,
      usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthForgotPasswordPost200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPermissionsRolesRolePut(
        role,
        usersPermissionsRolesPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPermissionsRolesRolePut']?.[index]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPostRequest} usersPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async usersPost(
      usersPostRequest: UsersPostRequest,
      options?: RawAxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersPost201Response>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.usersPost(
        usersPostRequest,
        options
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap['UsersPermissionsUsersRolesApi.usersPost']?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - factory interface
 * @export
 */
export const UsersPermissionsUsersRolesApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = UsersPermissionsUsersRolesApiFp(configuration);
  return {
    /**
     *
     * @summary Get user count
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number> {
      return localVarFp.usersCountGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get list of users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>> {
      return localVarFp.usersGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a user
     * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdDelete(
      requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUser> {
      return localVarFp
        .usersIdDelete(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a user
     * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdGet(
      requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsUser> {
      return localVarFp
        .usersIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a user
     * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersIdPut(
      requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPost201Response> {
      return localVarFp
        .usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get authenticated user info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser> {
      return localVarFp.usersMeGet(options).then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get default generated permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsPermissionsGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsPermissionsGet200Response> {
      return localVarFp
        .usersPermissionsPermissionsGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary List roles
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesGet(
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsRolesGet200Response> {
      return localVarFp
        .usersPermissionsRolesGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Get a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesIdGet(
      requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPermissionsRolesIdGet200Response> {
      return localVarFp
        .usersPermissionsRolesIdGet(requestParameters.id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesPost(
      requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Delete a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRoleDelete(
      requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .usersPermissionsRolesRoleDelete(requestParameters.role, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update a role
     * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPermissionsRolesRolePut(
      requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<AuthForgotPasswordPost200Response> {
      return localVarFp
        .usersPermissionsRolesRolePut(
          requestParameters.role,
          requestParameters.usersPermissionsRolesPostRequest,
          options
        )
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a user
     * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    usersPost(
      requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest,
      options?: RawAxiosRequestConfig
    ): AxiosPromise<UsersPost201Response> {
      return localVarFp
        .usersPost(requestParameters.usersPostRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UsersPermissionsUsersRolesApi - interface
 * @export
 * @interface UsersPermissionsUsersRolesApi
 */
export interface UsersPermissionsUsersRolesApiInterface {
  /**
   *
   * @summary Get user count
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersCountGet(options?: RawAxiosRequestConfig): AxiosPromise<number>;

  /**
   *
   * @summary Get list of users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsersPermissionsUser>>;

  /**
   *
   * @summary Delete a user
   * @param {string} id user Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersIdDelete(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser>;

  /**
   *
   * @summary Get a user
   * @param {string} id user Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersIdGet(id: string, options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser>;

  /**
   *
   * @summary Update a user
   * @param {string} id user Id
   * @param {UsersPostRequest} usersPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersIdPut(
    id: string,
    usersPostRequest: UsersPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPost201Response>;

  /**
   *
   * @summary Get authenticated user info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersMeGet(options?: RawAxiosRequestConfig): AxiosPromise<UsersPermissionsUser>;

  /**
   *
   * @summary Get default generated permissions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPermissionsPermissionsGet(
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsPermissionsGet200Response>;

  /**
   *
   * @summary List roles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPermissionsRolesGet(
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsRolesGet200Response>;

  /**
   *
   * @summary Get a role
   * @param {string} id role Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPermissionsRolesIdGet(
    id: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPermissionsRolesIdGet200Response>;

  /**
   *
   * @summary Create a role
   * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPermissionsRolesPost(
    usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthForgotPasswordPost200Response>;

  /**
   *
   * @summary Delete a role
   * @param {string} role role Id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPermissionsRolesRoleDelete(
    role: string,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthForgotPasswordPost200Response>;

  /**
   *
   * @summary Update a role
   * @param {string} role role Id
   * @param {UsersPermissionsRolesPostRequest} usersPermissionsRolesPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPermissionsRolesRolePut(
    role: string,
    usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<AuthForgotPasswordPost200Response>;

  /**
   *
   * @summary Create a user
   * @param {UsersPostRequest} usersPostRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApiInterface
   */
  usersPost(
    usersPostRequest: UsersPostRequest,
    options?: RawAxiosRequestConfig
  ): AxiosPromise<UsersPost201Response>;
}

/**
 * Request parameters for usersIdDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdDeleteRequest {
  /**
   * user Id
   * @type {string}
   * @memberof UsersPermissionsUsersRolesApiUsersIdDelete
   */
  readonly id: string;
}

/**
 * Request parameters for usersIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdGetRequest {
  /**
   * user Id
   * @type {string}
   * @memberof UsersPermissionsUsersRolesApiUsersIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for usersIdPut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersIdPutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersIdPutRequest {
  /**
   * user Id
   * @type {string}
   * @memberof UsersPermissionsUsersRolesApiUsersIdPut
   */
  readonly id: string;

  /**
   *
   * @type {UsersPostRequest}
   * @memberof UsersPermissionsUsersRolesApiUsersIdPut
   */
  readonly usersPostRequest: UsersPostRequest;
}

/**
 * Request parameters for usersPermissionsRolesIdGet operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest {
  /**
   * role Id
   * @type {string}
   * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGet
   */
  readonly id: string;
}

/**
 * Request parameters for usersPermissionsRolesPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest {
  /**
   *
   * @type {UsersPermissionsRolesPostRequest}
   * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesPost
   */
  readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest;
}

/**
 * Request parameters for usersPermissionsRolesRoleDelete operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest {
  /**
   * role Id
   * @type {string}
   * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDelete
   */
  readonly role: string;
}

/**
 * Request parameters for usersPermissionsRolesRolePut operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest {
  /**
   * role Id
   * @type {string}
   * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
   */
  readonly role: string;

  /**
   *
   * @type {UsersPermissionsRolesPostRequest}
   * @memberof UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePut
   */
  readonly usersPermissionsRolesPostRequest: UsersPermissionsRolesPostRequest;
}

/**
 * Request parameters for usersPost operation in UsersPermissionsUsersRolesApi.
 * @export
 * @interface UsersPermissionsUsersRolesApiUsersPostRequest
 */
export interface UsersPermissionsUsersRolesApiUsersPostRequest {
  /**
   *
   * @type {UsersPostRequest}
   * @memberof UsersPermissionsUsersRolesApiUsersPost
   */
  readonly usersPostRequest: UsersPostRequest;
}

/**
 * UsersPermissionsUsersRolesApi - object-oriented interface
 * @export
 * @class UsersPermissionsUsersRolesApi
 * @extends {BaseAPI}
 */
export class UsersPermissionsUsersRolesApi
  extends BaseAPI
  implements UsersPermissionsUsersRolesApiInterface
{
  /**
   *
   * @summary Get user count
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersCountGet(options?: RawAxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersCountGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get list of users
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersGet(options?: RawAxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a user
   * @param {UsersPermissionsUsersRolesApiUsersIdDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdDelete(
    requestParameters: UsersPermissionsUsersRolesApiUsersIdDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdDelete(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a user
   * @param {UsersPermissionsUsersRolesApiUsersIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdGet(
    requestParameters: UsersPermissionsUsersRolesApiUsersIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a user
   * @param {UsersPermissionsUsersRolesApiUsersIdPutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersIdPut(
    requestParameters: UsersPermissionsUsersRolesApiUsersIdPutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersIdPut(requestParameters.id, requestParameters.usersPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get authenticated user info
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersMeGet(options?: RawAxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersMeGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get default generated permissions
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsPermissionsGet(options?: RawAxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsPermissionsGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary List roles
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesGet(options?: RawAxiosRequestConfig) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Get a role
   * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesIdGet(
    requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesIdGetRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesIdGet(requestParameters.id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a role
   * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesPost(
    requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesPost(requestParameters.usersPermissionsRolesPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Delete a role
   * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesRoleDelete(
    requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRoleDeleteRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesRoleDelete(requestParameters.role, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update a role
   * @param {UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPermissionsRolesRolePut(
    requestParameters: UsersPermissionsUsersRolesApiUsersPermissionsRolesRolePutRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPermissionsRolesRolePut(
        requestParameters.role,
        requestParameters.usersPermissionsRolesPostRequest,
        options
      )
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a user
   * @param {UsersPermissionsUsersRolesApiUsersPostRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersPermissionsUsersRolesApi
   */
  public usersPost(
    requestParameters: UsersPermissionsUsersRolesApiUsersPostRequest,
    options?: RawAxiosRequestConfig
  ) {
    return UsersPermissionsUsersRolesApiFp(this.configuration)
      .usersPost(requestParameters.usersPostRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
